/* generated by Svelte v2.13.5 */

function create_main_fragment(component, ctx) {
	var table, thead, tr, th, text, text_1, th_1, text_2, text_3, th_2, text_4, text_5, th_3, text_6, text_9, tbody;

	var each_value = ctx.lines;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			table = createElement("table");
			thead = createElement("thead");
			tr = createElement("tr");
			th = createElement("th");
			text = createText("Last");
			text_1 = createText("\r\n      ");
			th_1 = createElement("th");
			text_2 = createText("Current");
			text_3 = createText("\r\n      ");
			th_2 = createElement("th");
			text_4 = createText("Name");
			text_5 = createText("\r\n      ");
			th_3 = createElement("th");
			text_6 = createText("UpdatedAt");
			text_9 = createText("\r\n  ");
			tbody = createElement("tbody");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h()
		},

		l(nodes) {
			table = claimElement(nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			thead = claimElement(table_nodes, "THEAD", {}, false);
			var thead_nodes = children(thead);

			tr = claimElement(thead_nodes, "TR", {}, false);
			var tr_nodes = children(tr);

			th = claimElement(tr_nodes, "TH", {}, false);
			var th_nodes = children(th);

			text = claimText(th_nodes, "Last");
			th_nodes.forEach(detachNode);
			text_1 = claimText(tr_nodes, "\r\n      ");

			th_1 = claimElement(tr_nodes, "TH", {}, false);
			var th_1_nodes = children(th_1);

			text_2 = claimText(th_1_nodes, "Current");
			th_1_nodes.forEach(detachNode);
			text_3 = claimText(tr_nodes, "\r\n      ");

			th_2 = claimElement(tr_nodes, "TH", {}, false);
			var th_2_nodes = children(th_2);

			text_4 = claimText(th_2_nodes, "Name");
			th_2_nodes.forEach(detachNode);
			text_5 = claimText(tr_nodes, "\r\n      ");

			th_3 = claimElement(tr_nodes, "TH", {}, false);
			var th_3_nodes = children(th_3);

			text_6 = claimText(th_3_nodes, "UpdatedAt");
			th_3_nodes.forEach(detachNode);
			tr_nodes.forEach(detachNode);
			thead_nodes.forEach(detachNode);
			text_9 = claimText(table_nodes, "\r\n  ");

			tbody = claimElement(table_nodes, "TBODY", {}, false);
			var tbody_nodes = children(tbody);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detachNode);
			table_nodes.forEach(detachNode);
			this.h();
		},

		h() {
			table.className = "table";
		},

		m(target, anchor) {
			insert(target, table, anchor);
			append(table, thead);
			append(thead, tr);
			append(tr, th);
			append(th, text);
			append(tr, text_1);
			append(tr, th_1);
			append(th_1, text_2);
			append(tr, text_3);
			append(tr, th_2);
			append(th_2, text_4);
			append(tr, text_5);
			append(tr, th_3);
			append(th_3, text_6);
			append(table, text_9);
			append(table, tbody);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},

		p(changed, ctx) {
			if (changed.odd || changed.lines || changed.Date) {
				each_value = ctx.lines;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(table);
			}

			destroyEach(each_blocks, detach);
		}
	};
}

// (12:4) {#each lines as line}
function create_each_block(component, ctx) {
	var tr, th, text, text_1_value = ctx.line.last, text_1, text_2, td, input, input_value_value, input_data_slug_value, text_4, td_1, a, text_5_value = ctx.line.slug, text_5, a_href_value, text_6, td_2, text_7_value = new ctx.Date(ctx.line.updatedAt).toLocaleString(), text_7, tr_class_value;

	return {
		c() {
			tr = createElement("tr");
			th = createElement("th");
			text = createText("$");
			text_1 = createText(text_1_value);
			text_2 = createText("\r\n        ");
			td = createElement("td");
			input = createElement("input");
			text_4 = createText("\r\n        ");
			td_1 = createElement("td");
			a = createElement("a");
			text_5 = createText(text_5_value);
			text_6 = createText("\r\n        ");
			td_2 = createElement("td");
			text_7 = createText(text_7_value);
			this.h()
		},

		l(nodes) {
			tr = claimElement(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			th = claimElement(tr_nodes, "TH", {}, false);
			var th_nodes = children(th);

			text = claimText(th_nodes, "$");
			text_1 = claimText(th_nodes, text_1_value);
			th_nodes.forEach(detachNode);
			text_2 = claimText(tr_nodes, "\r\n        ");

			td = claimElement(tr_nodes, "TD", {}, false);
			var td_nodes = children(td);

			input = claimElement(td_nodes, "INPUT", { type: true, class: true, value: true, "data-slug": true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detachNode);
			td_nodes.forEach(detachNode);
			text_4 = claimText(tr_nodes, "\r\n        ");

			td_1 = claimElement(tr_nodes, "TD", {}, false);
			var td_1_nodes = children(td_1);

			a = claimElement(td_1_nodes, "A", { href: true, target: true }, false);
			var a_nodes = children(a);

			text_5 = claimText(a_nodes, text_5_value);
			a_nodes.forEach(detachNode);
			td_1_nodes.forEach(detachNode);
			text_6 = claimText(tr_nodes, "\r\n        ");

			td_2 = claimElement(tr_nodes, "TD", {}, false);
			var td_2_nodes = children(td_2);

			text_7 = claimText(td_2_nodes, text_7_value);
			td_2_nodes.forEach(detachNode);
			tr_nodes.forEach(detachNode);
			this.h();
		},

		h() {
			setAttribute(input, "type", "number");
			input.className = "input xxx";
			input.value = input_value_value = "$" + ctx.line.current;
			input.dataset.slug = input_data_slug_value = "$" + ctx.line.slug;
			a.href = a_href_value = ctx.line.currentLink;
			a.target = "_blank";
			tr.className = tr_class_value = "$" + (ctx.odd ? 'is-selected' : '');
		},

		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, th);
			append(th, text);
			append(th, text_1);
			append(tr, text_2);
			append(tr, td);
			append(td, input);
			append(tr, text_4);
			append(tr, td_1);
			append(td_1, a);
			append(a, text_5);
			append(tr, text_6);
			append(tr, td_2);
			append(td_2, text_7);
		},

		p(changed, ctx) {
			if ((changed.lines) && text_1_value !== (text_1_value = ctx.line.last)) {
				setData(text_1, text_1_value);
			}

			if ((changed.lines) && input_value_value !== (input_value_value = "$" + ctx.line.current)) {
				input.value = input_value_value;
			}

			if ((changed.lines) && input_data_slug_value !== (input_data_slug_value = "$" + ctx.line.slug)) {
				input.dataset.slug = input_data_slug_value;
			}

			if ((changed.lines) && text_5_value !== (text_5_value = ctx.line.slug)) {
				setData(text_5, text_5_value);
			}

			if ((changed.lines) && a_href_value !== (a_href_value = ctx.line.currentLink)) {
				a.href = a_href_value;
			}

			if ((changed.Date || changed.lines) && text_7_value !== (text_7_value = new ctx.Date(ctx.line.updatedAt).toLocaleString())) {
				setData(text_7, text_7_value);
			}

			if ((changed.odd) && tr_class_value !== (tr_class_value = "$" + (ctx.odd ? 'is-selected' : ''))) {
				tr.className = tr_class_value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(tr);
			}
		}
	};
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.line = list[i];
	child_ctx.each_value = list;
	child_ctx.line_index = i;
	return child_ctx;
}

function SvelteComponent(options) {
	init(this, options);
	this._state = assign({ Date : Date }, options.data);
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(SvelteComponent.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_stage: _stage,
 	_mount: _mount,
 	_differs: _differs
 });

SvelteComponent.prototype._recompute = noop;

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function claimElement (nodes, name, attributes, svg) {
	for (var i = 0; i < nodes.length; i += 1) {
		var node = nodes[i];
		if (node.nodeName === name) {
			for (var j = 0; j < node.attributes.length; j += 1) {
				var attribute = node.attributes[j];
				if (!attributes[attribute.name]) node.removeAttribute(attribute.name);
			}
			return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
		}
	}

	return svg ? createSvgElement(name) : createElement(name);
}

function children (element) {
	return Array.from(element.childNodes);
}

function claimText (nodes, data) {
	for (var i = 0; i < nodes.length; i += 1) {
		var node = nodes[i];
		if (node.nodeType === 3) {
			node.data = data;
			return nodes.splice(i, 1)[0];
		}
	}

	return createText(data);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function append(target, node) {
	target.appendChild(node);
}

function destroyEach(iterations, detach) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detach);
	}
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function setData(text, data) {
	text.data = '' + data;
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function noop() {}

function createSvgElement(name) {
	return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function blankObject() {
	return Object.create(null);
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}
export default SvelteComponent;